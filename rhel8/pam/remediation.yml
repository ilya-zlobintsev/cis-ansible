- hosts: all
  become: true
  tasks:
    - name: Ensure password creating requirements
      community.general.pamd:
        name: '{{ item }}'
        type: password
        module_path: pam_pwquality.so
        module_arguments: 'try_first_pass enforce-for-root retry=3'
        control: requisite
      with_items:
        - system-auth
        - password-auth

    - name: Check if password length policy is appropriate
      command: grep -E '\s*minlen\s*=\s*(1[4-9]|[2-9][0-9]|60)' /etc/security/pwquality.conf
      register: pw_minlen_appropriate
      changed_when: false
      ignore_errors: true

    - name: Set password mininum length
      ansible.builtin.lineinfile:
        path: /etc/security/pwquality.conf
        line: 'minlen = 14'
        regexp: '\s*minlen'
        state: present
      when: pw_minlen_appropriate.stdout == ""

    - name: Check if password minclass is appropriate
      command: grep -E '\s*minclass\s*=\s*([4-9]|[1-9][0-9])' /etc/security/pwquality.conf
      register: pw_minclass_appropriate
      changed_when: false
      ignore_errors: true

    - name: Set password minclass
      ansible.builtin.lineinfile:
        path: /etc/security/pwquality.conf
        line: 'minclass = 4'
        regexp: '\s*minclass'
        state: present
      when: pw_minclass_appropriate.stdout == ""

    - name: Check if password lockout is configured
      shell: grep -E '^\s*auth\s+required\s+pam_faillock.so\s+' /etc/pam.d/password-auth /etc/pam.d/system-auth
      register: pw_lockout
      changed_when: false
      ignore_errors: true

    - name: Set lockout for failed password attempts
      block:
      - name: Set lockout for failed password attempts (preauth)
        ansible.builtin.lineinfile:
          path: '/etc/pam.d/{{ item }}'
          line: 'auth required pam_faillock.so preauth silent deny=5 unlock_time=900'
          state: present
        with_items:
          - system-auth
          - password-auth

      - name: Set lockout for failed password attempts (authfail)
        ansible.builtin.lineinfile:
          path: '/etc/pam.d/{{ item }}'
          line: 'auth required pam_faillock.so authfail deny=5 unlock_time=900'
          state: present
        with_items:
          - system-auth
          - password-auth
      when: pw_lockout.stdout == ''

        #- name: Check if password reuse is limited
        #  shell: grep -P '^\s*password\s+(requisite|sufficient)\s+(pam_pwhistory\.so|pam_unix\.so)\s+([^#\n\r]+\s+)?remember=([5-9]|[1-9][0-9]+)\s*(\s+.*)?$' /etc/pam.d/system-auth | wc -l
        #  register: pam_pw_reuse_count
        #  changed_when: false
        #  ignore_errors: true

        #- name: Set password reuse policy
        #  ansible.builtin.lineinfile:
        #    path: /etc/pam.d/system-auth
        #    state: present
        #    regexp: 
        #
    - name: Check if password reuse is limited (pam_pwhistory.so)
      shell: grep -P '^\s*password\s+requisite\s+pam_pwhistory.so\s++([^#\n\r]+\s+)?remember=([5-9]|[1-9][0-9]+)$' /etc/pam.d/system-auth
      register: pam_pw_reuse_pwhistory
      changed_when: false
      ignore_errors: true

    - name: Set password reuse policy (pam_pwhistory.so)
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-auth
        regexp: '^\s*password\s+requisite\s+pam_pwhistory.so'
        line: 'password requisite pam_pwhistory.so try_first_pass local_users_only enforce-for-root retry=3 remember=5'
        state: present
      when: pam_pw_reuse_pwhistory.stdout == ''

    - name: Check if password reuse is limited (pam_unix.so)
      shell: grep -P '^\s*password\s+sufficient\s+pam_unix.so\s+([^#\n\r]+\s+)?remember=([5-9]|[1-9][0-9]+)$' /etc/pam.d/system-auth
      register: pam_pw_reuse_unix
      changed_when: false
      ignore_errors: true

    - name: Set password reuse policy (pam_unix.so)
      ansible.builtin.lineinfile:
        path: /etc/pam.d/system-auth
        regexp: '^\s*password\s+sufficient\s+pam_unix.so'
        line: 'password sufficient pam_unix.so sha512 shadow try_first_pass use_authtok remember=5'
        state: present
      when: pam_pw_reuse_unix.stdout == ''

    - name: Check if the hashing algorithm is SHA-512
      command: grep -E '^\s*password\s+sufficient\s+pam_unix.so\s+.*sha512\s*.*$' /etc/pam.d/password-auth /etc/pam.d/system-auth
      register: pam_has_sha512
      changed_when: false
      ignore_errors: true

    - name: Set the hashing algorithm to SHA-512
      community.general.pamd:
        name: '{{ item }}'
        type: auth
        control: sufficient
        module_path: pam_unix.so
        module_arguments: 'sha512
            shadow
            try_first_pass
            use_authtok'
        state: updated
      with_items:
        - system-auth
        - password-auth
      when: pam_has_sha512.stdout == ''
